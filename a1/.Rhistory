df_anomalies,
data.frame(
feature = col,
num_anomalies = num_anomalies,
total_points = total_points,
percent_anomalies = percent_anomalies
)
)
# Aggregate total results
overall_anomalies <- overall_anomalies + num_anomalies
overall_points    <- overall_points + total_points
}
overall_percent <- (overall_anomalies / overall_points) * 100
cat("\nAnomaly summary per feature:\n")
print(df_anomalies)
cat("\nOverall anomaly summary:\n")
cat(round(overall_percent, 2), "%\n")
#--------------------------------------------------------------------------
# (iii) Extracting data for Week 5
#--------------------------------------------------------------------------
df_zscores$DateTime <- as.POSIXct(
paste(df_zscores$Date, df_zscores$Time),
format = "%d/%m/%Y %H:%M:%S"
)
start_date <- as.POSIXct("29/1/2007 00:00:00", format = "%d/%m/%Y %H:%M:%S")
end_date   <- as.POSIXct("4/2/2007 00:00:00",  format = "%d/%m/%Y %H:%M:%S")
df_Week5 <- subset(df_zscores, DateTime >= start_date & DateTime <= end_date)
print(start_date)
#--------------------------------------------------------------------------
#                                 Part 3
#--------------------------------------------------------------------------
Group_Assignment_Dataset$DateTime <- as.POSIXct(paste(Group_Assignment_Dataset$Date
,Group_Assignment_Dataset$Time),
format="%d/%m/%Y %H:%M:%S")
# adding hour and day rows to the data set
# doing this because it is easier to filter the data into different
# categories
Group_Assignment_Dataset$Hour <- format(Group_Assignment_Dataset$DateTime, "%H:%M")
Group_Assignment_Dataset$Day <- weekdays(Group_Assignment_Dataset$DateTime)
# subsetting the data into day time hours and night time hours
# using the hours specified in the assignment description
day_time_window <- Group_Assignment_Dataset[Group_Assignment_Dataset$Hour >= "07:30"
& Group_Assignment_Dataset$Hour <= "17:00",]
night_time_window <- Group_Assignment_Dataset[!(Group_Assignment_Dataset$Hour >= "07:30"
& Group_Assignment_Dataset$Hour <= "17:00"), ]
# subsetting the data based on weekday vs weekend and time window
# because the assignment made a distinction when talking about weekday and weekend
# NOTE: I'm not actually sure if we're supposed to make a distinction between
# weekdays and weekends
weekdays_data_day <- day_time_window[day_time_window$Day
%in% c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday"), ]
weekends_data_day <- day_time_window[day_time_window$Day
%in% c("Saturday","Sunday"), ]
weekdays_data_night <- night_time_window[night_time_window$Day
%in% c("Monday", "Tuesday", "Wednesday",
"Thursday", "Friday"), ]
weekends_data_night <- night_time_window[night_time_window$Day
%in% c("Saturday","Sunday"),]
# testing to see if I filtered the data correctly
print(Group_Assignment_Dataset)
print(day_time_window)
print(night_time_window)
print(weekdays_data_day)
print(weekends_data_day)
print(weekdays_data_night)
print(weekends_data_night)
table(weekends_data_night$Day)
table(weekends_data_day$Day)
table(weekdays_data_night$Day)
table(weekdays_data_day$Day)
# computing the averages, each time(Hour) with the same value, is grouped together
weekdays_avg_day <- tapply(weekdays_data_day$Global_intensity, weekdays_data_day$Hour, mean, na.rm = TRUE)
weekends_avg_day <- tapply(weekends_data_day$Global_intensity, weekends_data_day$Hour, mean, na.rm = TRUE)
weekdays_avg_night <- tapply(weekdays_data_night$Global_intensity, weekdays_data_night$Hour, mean, na.rm = TRUE)
weekends_avg_night <- tapply(weekends_data_night$Global_intensity, weekends_data_night$Hour, mean, na.rm = TRUE)
typeof(weekdays_data_day$Day)
typeof(weekdays_data_day$Hour)
typeof(weekdays_data_day$Hour)
typeof(weekdays_data_day$Time)
typeof(weekdays_data_day$Date)
class(weekdays_data_day$Date)
str(weekdays_data_day$Date)
str(weekdays_data_day)
Group_Assignment_Dataset$Hour <- as.POSIXct(Group_Assignment_Dataset$Hour, format = "%H:%M")
str(weekdays_data_day)
str(Group_Assignment_Dataset)
print(Group_Assignment_Dataset)
Group_Assignment_Dataset$Hour <- as.POSIXct(Group_Assignment_Dataset$DateTime, format = "%H:%M")
str(Group_Assignment_Dataset)
print(Group_Assignment_Dataset)
hour = as.POSIXct(c(
"2020-01-01 12:00",
"2020-01-01 13:00",
"2020-01-01 14:00"
))
hour
format(hour, format = "%H:%M")
typeof(weekdays_avg_day)
# computing the averages, each time(Hour) with the same value, is grouped together
weekdays_avg_day <- aggregate(Global_intensity ~ Hour, data = weekdays_data_day, FUN = mean)
weekdays_avg_day
# computing the averages, each time(Hour) with the same value, is grouped together
weekdays_avg_day <- aggregate(Global_intensity ~ Hour, data = weekdays_data_day, FUN = mean)
fit1 <- lm(Global_intensity ~ Hour, data = weekdays_avg_day)
fit1
summary(fit1)
summary(fit1)
weekends_avg_day <- aggregate(Global_intensity ~ Hour, data = weekends_data_day, FUN = mean)
# computing the averages, each time(Hour) with the same value, is grouped together
weekdays_avg_day <- aggregate(Global_intensity ~ Hour, data = weekdays_data_day, FUN = mean)
weekends_avg_day <- aggregate(Global_intensity ~ Hour, data = weekends_data_day, FUN = mean)
weekdays_avg_night <- aggregate(Global_intensity ~ Hour, data = weekdays_data_night, FUN = mean)
weekends_avg_night <- aggregate(Global_intensity ~ Hour, data = weekends_data_night, FUN = mean)
fit1 <- lm(Global_intensity ~ Hour, data = weekdays_avg_day)
fit2 <- lm(Global_intensity ~ Hour, data = weekends_avg_day)
fit3 <- lm(Global_intensity ~ Hour, data = weekdays_avg_night)
fit4 <- lm(Global_intensity ~ Hour, data = weekdays_avg_night)
ggplot(weekends_avg_day, aes(x = as.POSIXct(Time, format="%H:%M"), y = Global_intensity)) +
geom_point()
ggplot(weekends_avg_day, aes(x = as.POSIXct(Hour, format="%H:%M"), y = Global_intensity)) +
geom_point()
weekends_avg_day
ggplot(weekends_avg_day, aes(x = Hour, y = Global_intensity)) +
geom_point()
ggplot(weekends_avg_day, aes(x = as.POSIXct(Hour, format="%H:%M"), y = Global_intensity)) +
geom_point()
as.POSIXct(weekdays_avg_day$Hour, format="%H:%M")
ggplot(weekends_avg_day, aes(x = as.POSIXct(Hour, format="%H:%M"), y = Global_intensity)) +
geom_smooth(method = "lm", formula = y ~ x, se = FALSE, color = "red")
ggplot(weekends_avg_day, aes(x = as.POSIXct(Hour, format="%H:%M"), y = Global_intensity)) +
geom_smooth(weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red")
ggplot() +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
weekends_avg_night <- aggregate(Global_intensity ~ Hour, data = weekends_data_night, FUN = mean)
weekdays_avg_night
as.POSIXct(weekdays_avg_night$Hour, format="%H:%M")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
Group_Assignment_Dataset$Time
strptime("17:00", "%H:%M")
night_time_window$Time
day_time_window$Time
fit1
plot(fit1)
weekdats_avg_days
weekdays_avg_days
weekdays_avg_day
weekdays_avg_day$Hour
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
dat <- tibble(
hour = as.POSIXct(c(
"2020-01-01 12:00",
"2020-01-01 13:00",
"2020-01-01 14:00"
)),
y = 1:3
)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = Hour,
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
dat <- tibble(
hour = as.POSIXct(c(
"2020-01-01 12:00",
"2020-01-01 13:00",
"2020-01-01 14:00"
)),
y = 1:3
)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Time, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Time, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Time, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Time, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
weekdays_avg_night
weekends_avg_day
weekends_avg_day
weekdays_avg_night
weekdays_avg_night
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow")
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ x, se = FALSE, color = "yellow") +
scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees
)
polyfit1 = lm(Global_intensity ~ poly(Hour, 2, raw=TRUE, data)
polyfit1 = lm(Global_intensity ~ poly(Hour, 2, raw=TRUE, data))
polyfit1 = lm(Global_intensity ~ poly(Hour, 2, raw=TRUE, data))
polyfit1 = lm(Global_intensity ~ poly(Hour, 2, raw=TRUE, weekdays_avg_day))
polyfit1 = lm(Global_intensity ~ poly(Hour, 2, raw=TRUE), data = weekdays_avg_day)
str(Group_Assignment_Dataset)
day_time_window$Time
weekdays_avg_night$Hour
as.POSIXct(weekdays_avg_night$Hour, format ="%H:%M")
as.numeric(as.POSIXct(weekdays_avg_night$Hour, format ="%H:%M"))
fit1 <- lm(Global_intensity ~ as.numeric(as.POSIXct(Hour, format="%H:%M")), data = weekdays_avg_day)
fit2 <- lm(Global_intensity ~ as.numeric(as.POSIXct(Hour, format="%H:%M")), data = weekends_avg_day)
fit3 <- lm(Global_intensity ~ as.numeric(as.POSIXct(Hour, format="%H:%M")), data = weekdays_avg_night)
fit4 <- lm(Global_intensity ~ as.numeric(as.POSIXct(Hour, format="%H:%M")), data = weekdays_avg_night)
summary(fit1)
polyfit1 = lm(Global_intensity ~ poly(as.numeric(as.POSIXct(Hour, format="%H:%M")), 2, raw=TRUE), data = weekdays_avg_day)
polyfit1 = lm(Global_intensity ~ poly(as.numeric(as.POSIXct(Hour, format="%H:%M")), 2, raw=TRUE), data = weekdays_avg_day)
polyfit2 = lm(Global_intensity ~ poly(as.numeric(as.POSIXct(Hour, format="%H:%M")), 2, raw=TRUE), data = weekends_avg_day)
polyfit3 = lm(Global_intensity ~ poly(as.numeric(as.POSIXct(Hour, format="%H:%M")), 2, raw=TRUE), data = weekdays_avg_night)
polyfit4 = lm(Global_intensity ~ poly(as.numeric(as.POSIXct(Hour, format="%H:%M")), 2, raw=TRUE), data = weekends_avg_night)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE) se = FALSE, color = "yellow") +
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "yellow") +
scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees
)
ggplot() +
geom_smooth(data = weekdays_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "red") +
geom_smooth(data = weekends_avg_day,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "blue") +
geom_smooth(data = weekdays_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "green") +
geom_smooth(data = weekends_avg_night,
aes(x = as.POSIXct(Hour, format="%H:%M"),
y = Global_intensity),method = "lm",
formula = y ~ poly(x,2,raw = TRUE), se = FALSE, color = "yellow") +
scale_x_datetime(
date_breaks = "1 hour",
date_labels = "%H:%M"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # Rotate x-axis labels by 45 degrees
)
